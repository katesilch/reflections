When would you want to use a remote repository rather than keeping all your work
local?
	Having a remote repository is useful when you work on the project using different
	computers. For example, you can do the changes to the project on your computer
	at work, and then come home and use the remote repository to see or pull these
	changes to your home computer/laptop. Also, when there are several people involved
	in the project, most likely that they will not share the same computer, which
	means that they will have to somehow access the project's repository to make the
	changes or see the changes made by others. Remote repository would be the best
	tool to make it happen.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	If Git will automatically pull changes from the remote repository, then they
	both will be identical to remote repository. But what will happen if there
	were commits in Git that the programmer wanted to push to remote repository
	to update it? Instead, the most current version of the branch will be replaced
	with the outdated one.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
	Forks are the clones of repositories made on GitHub servers only. That means
	that when you fork somebody else's repository, it will appear directly on
	your GitHub profile. Clones are copies of repositories made both locally
	(you can clone your repository and save the clone in a different directory
	on your computer) or made from GitHub to a computer (you can clone someone
	else's repository and save it on your computer). However, you cannot clone
	a repository from someone's GitHub profile to your own GitHub profile - for
	that you will need to use fork. Branch is a list of commits. You can create
	new branches and save commits there if you want to make some exotic or
	experimental changes to your projects or add a new feature. Branches are used
	when you have a master branch and want to keep it the way it, but try something
	new. You don't need to clone your repository for that - it's just enough to
	create another branch and save your experimental commits there.

What is the benefit of having a copy of the last known state of the remote
stored locally?
	In case anybody else is working on a project, they might update the remote.
	For example, if they add several commits to it, it will be harder for the
	programmer to merge his own version with the most current on remote. Instead,
	he can use his local copy of the remote to see what was the initial parent
	commit that he started working with. He will also be able to compare his
	branch with the same branch on remote to see what commits he added, and what
	exactly was added in each of the commits, and how it all is different from
	the remote version. This way the programmer will be able to see what changes
	he made, and it will make it easier to merge his most recent commit with the
	one that is on GitHub.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?
	It would be very hard to collaborate without using Git or GitHub. In order
	to share the changes in the project with other, programmer would have to
	either send zip files in the emails/messengers. If the people are close,
	they could copy it to a memory stick or use a shared network. But it will
	be not possible in case people are not located in the same building. The only
	easier thing about not using Git or GitHub is ability to share the versions
	without being connected to the internet, but you can always use the methods
	decribed above. Using them on the regular basis would be much more complicated
	and imperfect as opposed to using Git and GitHub.


When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
	It is better to make changes in a separate branch when you are adding a new
	feature, or you don't know how the other collaborators will react to this
	change. It might be more convenient to directly push the changes into the
	master branch on GitHub, but this way others will not be able to see that
	there was a change (they will not be notified). When making a pull request,
	they will get a notification clearly showing what you are suggesting, and
	what changes you made. It might take longer to create separate branches
	and pull requests for every new change, but this helps keep the master branch
	neat and organized. It will also be much easier to make the merges when
	everyone knows what is going on in master branch.