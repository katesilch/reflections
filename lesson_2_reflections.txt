What happens when you initialize a repository? Why do you need to do it?
	When a repository is initialized, a hidden system directory .git is created.
	It will contain all future commits. This way Git will know that this directory
	is a repository, and the files and directories it contains are part of this
	repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	Staging area is the intermediate stage between the working directory and
	repository. Files that are included in the staging area are files, changes in
	which will be committed. These files are no longer part of the working
	directory, but not yet part of repository. After they have been committed,
	they will become a part of the latter. Staging area is a very useful tool if
	the programmer doesn't want to add all of the files in one commitment, so
	that commitments are logically separated from each other.

How can you use the staging area to make sure you have one commit per logical
change?
	You can only add the files that you want to commit to the staging area. So,
	if you made several different changes to different files, you can select
	ones that you want to commit for one logical change, and add them to the
	staging area. Then, after they are committed, you can take other files and
	add them to the staging area to make another commit. To be sure that files
	to be committed have only changes that you need, you can compare the files
	in the staging area to the ones in the most recent commit or the files in
	the working directory. This way it is easy to see the changes and this way
	be sure that there will be only one commit per logical change, as the rest
	of the changes can be committed in the next commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Branches might help is the programmer is considering adding a completely
	new experimental feature to the project, which will change a lot of code,
	or the behaviour of the program. He doesn't need to change the existing
	project for that, he can keep it on the master branch, and create a new
	experimental branch instead. This way, he can separately work on improving
	the main branch and adding the new feature, without fearing to break anything.
	It can also be useful if there are different versions of the product created,
	and each should be kept separately.

How do the diagrams help you visualize the branch structure?
	Diagrams are very helpful in visualizing the branch structure. It becomes
	very easy to see how different branches are related, what is the most recent
	commit in the branch, what are the parent commits, and what was the initial
	commit that started the branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The result of merging two branches together is a new commit that contains
	the combined code from both branches' tips. We represent it in the diagram
	as a new commit added to one of the branches. It becomes this branch's new
	tip. Also, all of the previous commits from the second merged branch will
	also be merged into the first branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	Automatic merge allows to merge the lines of the code that are both present
	in two commits, as well as deleting what was deleted in the original commit.
	This process saves time and effort, as it is automatically merging whatever
	needs to be merged. Once there is a conflict that cannot be solved without
	automatically choosing which option to keep, Git lets the programmer deal with
	it. It is very convenient, as the programmer doesn't have to do all common-
	sence merging by himself. He only takes part in whatever requires a decision.
